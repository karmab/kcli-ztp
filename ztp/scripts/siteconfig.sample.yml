{% set total_number = namespace(value=0) %}
---
apiVersion: ran.openshift.io/v1
kind: SiteConfig
metadata:
  name: example-standard
  namespace: example-standard
spec:
  baseDomain: {{ spoke_domain or '${DOMAIN}' }}
  pullSecretRef:
    name: assisted-deployment-pull-secret
  clusterImageSetNameRef: openshift-v${MINOR}
  sshPublicKey: ${SSH_PUB_KEY}
  clusters:
{% for spoke in spokes %}
{% set new_value = spoke["virtual_nodes"]|default(0) %}
{% set spoke_name = spoke.name %}
{% set spoke_network_type = spoke.get('network_type', spoke_network_type) %}
{% set spoke_api_ip = spoke.get('api_ip') %}
{% set spoke_ingress_ip= spoke.get('ingress_ip') %}
{% set spoke_ctlplanes_number = spoke.get('ctlplanes', 1) %}
{% set spoke_workers_number = spoke.get('workers', 0) %}
{% set spoke_snoplus = True if spoke_ctlplanes_number == 1 and spoke_workers_number == 1 else False %}
{% set virtual_nodes_number = spoke.get('virtual_nodes', 0) %}
{% set ipv6 = True if (spoke_api_ip != None and ':' in spoke_api_ip) or ':' in baremetal_cidr  else False %}
{% set cluster_network_ipv6 = {"cidr": "fd01::/48", "hostPrefix": 64} %}
{% set cluster_network_ipv4 = {"cidr": "10.132.0.0/14", "hostPrefix": 23} %}
{% set service_network_ipv6 = ["fd02::/112"] %}
{% set service_network_ipv4 = ["172.30.0.0/16"] %}
{% set machine_cidr_ipv4 = ["10.0.0.0/16"] %}
{% set machine_cidr_ipv6 = ["fc00::/48"] %}
{% set protocol = 'ipv6' if ipv6 else 'ipv4' %}
{% set dualprotocol = 'ipv4' if ipv6 else 'ipv6' %}
{% set default_prefix = baremetal_cidr.split('/')[1]Â %}
{% set default_gateway = baremetal_cidr|network_ip(1 if fake_network else -2) %}
{% set baremetal_gateway = static_baremetal_gateway or default_gateway %}
{% if dns %}
{% set baremetal_dns = installer_ip %}
{% else %}
{% set baremetal_dns = static_baremetal_dns or baremetal_gateway %}
{% endif %}
{% if dualstack|default(False) %}
{% set machine_cidrs = machine_cidr_ipv4 + machine_cidr_ipv6 %}
{% set cluster_networks = [cluster_network_ipv4] + [cluster_network_ipv6] %}
{% set service_networks = service_network_ipv4 + service_network_ipv6 %}
{% if ipv6 %}
{% set machine_cidrs = machine_cidrs|reverse %}
{% set cluster_networks = cluster_networks|reverse %}
{% set service_networks = service_networks|reverse %}
{% endif %}
{% elif ipv6 %}
{% set machine_cidrs = machine_cidr_ipv6 %}
{% set cluster_networks = [cluster_network_ipv6] %}
{% set service_networks = service_network_ipv6 %}
{% else %}
{% set machine_cidrs = machine_cidr_ipv4 %}
{% set cluster_networks = [cluster_network_ipv4] %}
{% set service_networks = service_network_ipv4 %}
{% endif %}
{% set spoke_name = spoke.name %}
{% set virtual_nodes_number = spoke.get('virtual_nodes', 0) %}
{% set nodes = spoke.get('baremetal_nodes', []) %}
{% if virtual_nodes_number > 0 %}
{% set extra_nodes = [] %}
{% for num in range(0, virtual_nodes_number) %}
{% set new_node = {'ip': static_ips[ctlplanes + workers + total_number.value + num]} if static_network and static_ips|length > ctlplanes + workers + total_number.value + num else {} %}
{% do extra_nodes.append(new_node) %}
{% endfor %}
{% set nodes = extra_nodes + nodes %}
{% endif %}
  - clusterName: {{ spoke_name }}
    networkType: {{ spoke_network_type }}
    clusterLabels:
      common: "true"
      logicalGroup: "active"
      sites : example-multinode
      hardware-type: "hw-type-platform-1"
      group-du-sno: ""
{% if spoke_ctlplanes_number > 1 and spoke_api_ip != None and spoke_ingress_ip != None %}
    apiVIP: {{ spoke_api_ip }}
    ingressVIP: {{ spoke_ingress_ip }}
{% endif %}
    machineNetwork:
    - cidr: {{ baremetal_cidr }}
    clusterNetwork:
  {% for network in cluster_networks %}
    - cidr: {{ network['cidr'] }}
      hostPrefix: {{ network['hostPrefix'] }}
  {% endfor %}
    serviceNetwork:
  {% for network in service_networks %}
    - {{ network }}
  {% endfor %}
{% if (spoke_ctlplanes_number > 1 or spoke_workers_number > 0) and spoke_api_ip == None and spoke_ingress_ip == None %}
    userManagedNetworking: True
{% endif %}
    nodes:
{% for node in nodes %}
{% set num = loop.index0 %}
{% set max_ctlplanes = 1 if spoke_snoplus else 3 %}
{% if 'mac' in node %}
{% set mac = node['mac'] %}
{% else %}
{% set mac = "%s:%0.2d" % (virtual_mac_prefix, ctlplanes + workers + total_number.value + num + 1) %}
{% endif %}
    - hostName: {{ cluster }}-{{ spoke_name }}-node-{{ num }}
      role: {{ 'master' if num < max_ctlplanes else 'worker' }}
      {% if 'redfish_address' in node %}
      disableCertificateVerification: True
      {% if node['redfish_address'].startswith('redfish-') or node['redfish_address'].startswith('idrac-') %}
      bmcAddress: {{ node['redfish_address'] }}
      {% elif node['model']|default(model) in ['hp', 'hpe', 'supermicro'] %}
      bmcAddress: redfish-virtualmedia://{{ node['redfish_address'] }}/redfish/v1/Systems/1
      {% else %}
      bmcAddress: idrac-virtualmedia://{{ node['redfish_address'] }}/redfish/v1/Systems/System.Embedded.1
      {% endif %}
      {% else %}
      bmcAddress: redfish-virtualmedia+http://${BAREMETAL_IP}:9000/redfish/v1/Systems/kcli/{{cluster }}-{{ spoke_name }}-node-{{ num }}
      {% endif %}
      bmcCredentialsName:
        name: {{ cluster }}-ztp-{{ spoke_name }}-bmc-secret-{{ num }}
      bootMACAddress: {{ mac }}
      bootMode: {{ 'UEFI' if spoke_uefi else 'legacy' }}
      rootDeviceHints:
       deviceName: /dev/{{ node.disk|default(default_disk)|string|basename }}
{% if 'ip' in node %}
      nodeNetwork:
        interfaces:
        - name: eth0
          macAddress: {{ mac }}
        config:
          interfaces:
          - name: eth0
            type: ethernet
            state: up
            {{ 'ipv4' if ':' in node.ip else 'ipv6' }}:
              enabled: false
            {{ 'ipv6' if ':' in node.ip else 'ipv4' }}:
              enabled: true
              address:
              - ip: {{ node.ip }}
                prefix-length: {{ node.prefix|default(default_prefix) }}
          dns-resolver:
            config:
              search:
               - {{ node.domain|default(domain) }}
              server:
              - {{ node.dns|default(baremetal_dns) }}
          routes:
            config:
            - destination: {{ '::/0' if ':' in node.ip else '0.0.0.0/0' }}
              next-hop-interface: eth0
              next-hop-address: {{ node.gateway|default(baremetal_gateway) }}
              table-id: 254
{% endif %}
{% endfor %}
{% set total_number.value = total_number.value + virtual_nodes_number %}
{% endfor %}
