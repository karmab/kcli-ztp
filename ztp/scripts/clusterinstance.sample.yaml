
{% set spoke = spokes[index] %}
{% set new_value = spoke.virtual_nodes|default(0) %}
{% set spoke_name = spoke.name %}
{% set cluster_templates = 'ibi-cluster-templates-v1' if spoke.ibi|default(False) else 'ai-cluster-templates-v1 '%}
{% set node_templates = 'ibi-node-templates-v1' if spoke.ibi|default(False) else 'ai-node-templates-v1 '%}
{% set disk_path = spoke.disk_path|default(default_disk) %}
{% set disk_minimum_size = spoke.disk_minimum_size|default(spoke_disk_minimum_size) %}
{% set labels = spoke.labels|default({})  %}
{% set api_ip = spoke.get('api_ip') %}
{% set ingress_ip= spoke.get('ingress_ip') %}
{% set ctlplanes_number = spoke.ctlplanes|default(1) %}
{% set workers_number = spoke.workers|default(0) %}
{% set virtual_nodes_number = spoke.virtual_nodes|default(0) %}
{% set ipv6 = True if (api_ip != None and ':' in api_ip) or ':' in baremetal_cidr  else False %}
{% set cluster_network_ipv6 = {"cidr": "fd01::/48", "hostPrefix": 64} %}
{% set cluster_network_ipv4 = {"cidr": "10.132.0.0/14", "hostPrefix": 23} %}
{% set service_network_ipv6 = ["fd02::/112"] %}
{% set service_network_ipv4 = ["172.30.0.0/16"] %}
{% set machine_cidr_ipv4 = ["10.0.0.0/16"] %}
{% set machine_cidr_ipv6 = ["fc00::/48"] %}
{% set protocol = 'ipv6' if ipv6 else 'ipv4' %}
{% set dualprotocol = 'ipv4' if ipv6 else 'ipv6' %}
{% set default_prefix = baremetal_cidr.split('/')[1] %}
{% set default_gateway = baremetal_cidr|network_ip(1 if fake_network else -2) %}
{% set baremetal_gateway = static_baremetal_gateway or default_gateway %}
{% set baremetal_dns = installer_ip if dns else (static_baremetal_dns or baremetal_gateway) %}
{% if dualstack|default(False) %}
{% set machine_cidrs = machine_cidr_ipv4 + machine_cidr_ipv6 %}
{% set cluster_networks = [cluster_network_ipv4] + [cluster_network_ipv6] %}
{% set service_networks = service_network_ipv4 + service_network_ipv6 %}
{% if ipv6 %}
{% set machine_cidrs = machine_cidrs|reverse %}
{% set cluster_networks = cluster_networks|reverse %}
{% set service_networks = service_networks|reverse %}
{% endif %}
{% elif ipv6 %}
{% set machine_cidrs = machine_cidr_ipv6 %}
{% set cluster_networks = [cluster_network_ipv6] %}
{% set service_networks = service_network_ipv6 %}
{% else %}
{% set machine_cidrs = machine_cidr_ipv4 %}
{% set cluster_networks = [cluster_network_ipv4] %}
{% set service_networks = service_network_ipv4 %}
{% endif %}
{% set virtual_nodes_number = spoke.virtual_nodes|default(0) %}
{% set nodes = spoke.baremetal_nodes|default([]) %}
{% if virtual_nodes_number > 0 %}
{% set extra_nodes = [] %}
{% for num in range(0, virtual_nodes_number) %}
{% set new_node = {'ip': static_ips[ctlplanes + workers + total_number + num]} if static_network and static_ips|length > ctlplanes + workers + total_number + num else {} %}
{% do extra_nodes.append(new_node) %}
{% endfor %}
{% set nodes = extra_nodes + nodes %}
{% endif %}
apiVersion: siteconfig.open-cluster-management.io/v1alpha1
kind: ClusterInstance
metadata:
  name: {{ spoke_name }}
  namespace: {{ spoke_name }}
spec:
  baseDomain: {{ spoke_domain or '${DOMAIN}' }}
  clusterImageSetNameRef: openshift-v${MINOR}
  clusterName: {{ spoke_name }}
  clusterNetwork:
  {% for network in cluster_networks %}
  - cidr: {{ network.cidr }}
    hostPrefix: {{ network.hostPrefix }}
  {% endfor %}
{% if ctlplanes_number == 1 %}
  cpuPartitioningMode: AllNodes
  installConfigOverrides: |
    {
      "capabilities": {
        "baselineCapabilitySet": "None",
        "additionalEnabledCapabilities": [
          "marketplace",
          "NodeTuning",
          "OperatorLifecycleManager",
          "Ingress"
        ]
      }
    }
{% endif %}
  extraLabels:
    ManagedCluster:
      provider: "kcli"
{% for label, value in labels.items() %}
      {{ label }}: "{{ value }}"
{% endfor %}
{% if ctlplanes_number > 1 and api_ip != None and ingress_ip != None %}
  apiVIP: {{ api_ip }}
  ingressVIP: {{ ingress_ip }}
{% endif %}
  ignitionConfigOverride: '{"ignition":{"version":"3.2.0"},"storage":{"files":[{"path":"/etc/containers/policy.json","mode":420,"overwrite":true,"contents":{"source":"data:text/plain;charset=utf-8;base64,ewogICAgImRlZmF1bHQiOiBbCiAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJpbnNlY3VyZUFjY2VwdEFueXRoaW5nIgogICAgICAgIH0KICAgIF0sCiAgICAidHJhbnNwb3J0cyI6CiAgICAgICAgewogICAgICAgICAgICAiZG9ja2VyLWRhZW1vbiI6CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIiI6IFt7InR5cGUiOiJpbnNlY3VyZUFjY2VwdEFueXRoaW5nIn1dCiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQp9"}}]}}'
  machineNetwork:
  - cidr: {{ baremetal_cidr }}
  networkType: "OVNKubernetes"
  pullSecretRef:
    name: assisted-deployment-pull-secret
  serviceNetwork:
  {% for network in service_networks %}
  - cidr: {{ network }}
  {% endfor %}
{% if (ctlplanes_number > 1 or workers_number > 0) and api_ip == None and ingress_ip == None %}
  userManagedNetworking: True
{% endif %}
  sshPublicKey: ${SSH_PUB_KEY}
  templateRefs:
  - name: {{ cluster_templates }}
    namespace: open-cluster-management
  nodes:
{% for node in nodes %}
{% set num = loop.index0 %}
{% if 'mac' in node %}
{% set mac = node.mac %}
{% else %}
{% set mac = "%s:%0.2d" % (virtual_mac_prefix, ctlplanes + workers + total_number + num + 1) %}
{% endif %}
  - automatedCleaningMode: "disabled"
    {% if 'redfish_address' in node %}
    disableCertificateVerification: True
    {% if node.redfish_address.startswith('redfish-') or node.redfish_address.startswith('idrac-') %}
    bmcAddress: {{ node.redfish_address }}
    {% elif node.model|default(model) in ['hp', 'hpe', 'supermicro'] %}
    bmcAddress: redfish-virtualmedia://{{ node.redfish_address }}/redfish/v1/Systems/1
    {% else %}
    bmcAddress: idrac-virtualmedia://{{ node.redfish_address }}/redfish/v1/Systems/System.Embedded.1
    {% endif %}
    {% else %}
    bmcAddress: redfish-virtualmedia://${BAREMETAL_IP}:9000/redfish/v1/Systems/kcli/{{cluster }}-{{ spoke_name }}-node-{{ num }}
    {% endif %}
    bmcCredentialsName:
      name: {{ cluster }}-ztp-{{ spoke_name }}-bmc-secret-{{ num }}
    bootMACAddress: {{ mac }}
    bootMode: {{ 'UEFI' if spoke_uefi else 'legacy' }}
    hostName: {{ cluster }}-{{ spoke_name }}-node-{{ num }}
    ignitionConfigOverride: |
      {
        "ignition": {
          "version": "3.2.0"
        },
        "storage": {
          "disks": [
            {
              "device": "{{ disk_path }}",
              "partitions": [
                {
                  "label": "var-lib-containers",
                  "sizeMiB": 0,
                  "startMiB": 60000
                }
              ],
              "wipeTable": false
            }
          ],
          "filesystems": [
            {
              "device": "/dev/disk/by-partlabel/var-lib-containers",
              "format": "xfs",
              "mountOptions": [
                "defaults",
                "prjquota"
              ],
              "path": "/var/lib/containers",
              "wipeFilesystem": true
            }
          ],
          "files": [
            {
              "path": "/etc/containers/policy.json",
              "mode":420,
              "overwrite": true,
              "contents": {
                "source": "data:text/plain;charset=utf-8;base64,ewogICAgImRlZmF1bHQiOiBbCiAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJpbnNlY3VyZUFjY2VwdEFueXRoaW5nIgogICAgICAgIH0KICAgIF0sCiAgICAidHJhbnNwb3J0cyI6CiAgICAgICAgewogICAgICAgICAgICAiZG9ja2VyLWRhZW1vbiI6CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIiI6IFt7InR5cGUiOiJpbnNlY3VyZUFjY2VwdEFueXRoaW5nIn1dCiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQp9"
              }
            }
          ]
        },
        "systemd": {
          "units": [
            {
              "contents": "# Generated by Butane\n[Unit]\nRequires=systemd-fsck@dev-disk-by\\x2dpartlabel-var\\x2dlib\\x2dcontainers.service\nAfter=systemd-fsck@dev-disk-by\\x2dpartlabel-var\\x2dlib\\x2dcontainers.service\n\n[Mount]\nWhere=/var/lib/containers\nWhat=/dev/disk/by-partlabel/var-lib-containers\nType=xfs\nOptions=defaults,prjquota\n\n[Install]\nRequiredBy=local-fs.target",
              "enabled": true,
              "name": "var-lib-containers.mount"
            }
          ]
        }
      }
    ironicInspect: "disabled"
{% if 'ip' in node %}
    nodeNetwork:
      interfaces:
      - name: enp3s0
        macAddress: {{ mac }}
      config:
        interfaces:
        - name: enp3s0
          type: ethernet
          state: up
          {{ 'ipv4' if ':' in node.ip else 'ipv6' }}:
            enabled: false
          {{ 'ipv6' if ':' in node.ip else 'ipv4' }}:
            enabled: true
            address:
            - ip: {{ node.ip }}
              prefix-length: {{ node.prefix|default(default_prefix) }}
        dns-resolver:
          config:
            search:
             - {{ node.domain|default(domain) }}
            server:
            - {{ node.dns|default(baremetal_dns) }}
        routes:
          config:
          - destination: {{ '::/0' if ':' in node.ip else '0.0.0.0/0' }}
            next-hop-interface: enp3s0
            next-hop-address: {{ node.gateway|default(baremetal_gateway) }}
            table-id: 254
{% endif %}
    role: {{ 'master' if num < 3 else 'worker' }}
    rootDeviceHints:
{% if 'disk_minimum_size' in node or disk_minimum_size != None %}
     minSizeGigabytes: {{ node.disk_minimum_size|default(disk_minimum_size) }}
{% elif 'disk_serial' in node %}
     serialNumber: {{ node.disk_serial }}
{% elif 'disk_wwn' in node %}
     wwn: {{ node.disk_wwn }}
{% elif 'disk_vendor' in node %}
     vendor: {{ node.disk_vendor }}
{% else %}
     deviceName: /dev/{{ node.disk|default(default_disk)|string|basename }}
{% endif %}
    templateRefs:
    - name: {{ node_templates }}
      namespace: open-cluster-management
{% endfor %}
